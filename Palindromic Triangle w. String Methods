# Hey Json
# here is the illegal failure cheating string solution to the palindromic triangle problem
#

for i in range(1, int(raw_input())+1):
    print "".join(str(range(1,i)).strip('[]').split(', ')) + "".join(str(range(i,0,-1)).strip('[]').split(', '))
    
# if you run this in visualize python you'll see it start with the list of integers from the range functions:
# input: i=5, range(1, i) 
# output: [1, 2, 3, 4]

# then it converts the whole fucking list to a string like this:
# input: [1, 2, 3, 4] 
# output: "[1, 2, 3, 4]"

# then it strips the characters we provided from the start and end of the string like this:
# input: "[1, 2, 3, 4]".strip('[]') 
# output: "1, 2, 3, 4"

# then it splits the string on the comma-space parts of the string, returning a list of the resulting strings:
# input: "1, 2, 3, 4".split(", ")
# ouput: ["1", "2", "3", "4"]

# then it joins the entries in the list separating with an empty string, "":
# input: "".join( ["1", "2", "3", "4"] )
# ouput: "1234"

# then it repeats this process for a range that counts backwards from i to zero:
# input: i=5, range(i, 0, -1)
# output: [5,4,3,2,1]

# I think I know how to solve the problem with arithmetic operations, but it involves some serious pattern recognition
